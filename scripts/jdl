#!/bin/bash

# Johnny Decimal Linter (jdl)
# Checks if directories follow Johnny Decimal naming conventions
# Format: NN-name (where NN is 10-99 and name is lowercase with hyphens)

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
VERBOSE=false
RECURSIVE=false
FIX_MODE=false
TARGET_PATH="."

# Help function
show_help() {
    cat <<EOF
Johnny Decimal Linter (jdl)

Usage: $0 [OPTIONS] [PATH]

Checks if directories follow Johnny Decimal naming conventions:
- Format: NN-name (where NN is 10-99) or NN-NN - Name (range format)
- Subdirectories: NN - Name, NN.NN - Name, or NN.NNNNN - Name (decimal format)
- Names should be lowercase with hyphens (strict) or Title Case (range/decimal)
- No spaces or special characters except hyphens
- Exception: "Inbox" folder is allowed at root level

OPTIONS:
    -h, --help          Show this help message
    -v, --verbose       Verbose output
    -r, --recursive     Check subdirectories recursively
    -f, --fix           Attempt to fix naming issues (interactive)
    PATH                Target path to check (default: current directory)

EXAMPLES:
    $0                    # Check current directory
    $0 /path/to/check     # Check specific path
    $0 -r /path/to/check  # Check recursively
    $0 -v -r .            # Verbose recursive check

EXIT CODES:
    0 - All paths follow Johnny Decimal conventions
    1 - Some paths have issues
    2 - Error occurred

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
        show_help
        exit 0
        ;;
    -v | --verbose)
        VERBOSE=true
        shift
        ;;
    -r | --recursive)
        RECURSIVE=true
        shift
        ;;
    -f | --fix)
        FIX_MODE=true
        shift
        ;;
    -*)
        echo -e "${RED}Error: Unknown option $1${NC}" >&2
        show_help
        exit 2
        ;;
    *)
        TARGET_PATH="$1"
        shift
        ;;
    esac
done

# Validate target path exists
if [[ ! -d "$TARGET_PATH" ]]; then
    echo -e "${RED}Error: Target path '$TARGET_PATH' does not exist or is not a directory${NC}" >&2
    exit 2
fi

# Johnny Decimal validation functions
is_johnny_decimal() {
    local dirname="$1"

    # Check if it matches the pattern: NN-name (strict format)
    if [[ "$dirname" =~ ^([1-9][0-9])-([a-z0-9-]+)$ ]]; then
        local number="${BASH_REMATCH[1]}"
        local name="${BASH_REMATCH[2]}"

        # Check if number is in valid range (10-99)
        if [[ "$number" -ge 10 && "$number" -le 99 ]]; then
            # Check if name doesn't start or end with hyphen
            if [[ "$name" != *- && "$name" != -* ]]; then
                return 0
            fi
        fi
    fi

    # Check if it matches the pattern: NN-NN - Name (range format)
    if [[ "$dirname" =~ ^([1-9][0-9])-([1-9][0-9])\ -(.+)$ ]]; then
        local start_number="${BASH_REMATCH[1]}"
        local end_number="${BASH_REMATCH[2]}"
        local name="${BASH_REMATCH[3]}"

        # Check if numbers are in valid range (10-99) and start <= end
        if [[ "$start_number" -ge 10 && "$start_number" -le 99 &&
            "$end_number" -ge 10 && "$end_number" -le 99 &&
            "$start_number" -le "$end_number" ]]; then
            # Trim leading/trailing spaces from name
            name=$(echo "$name" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            if [[ -n "$name" ]]; then
                return 0
            fi
        fi
    fi

    # Check if it matches the pattern: NN.NNNNN - Name (decimal format)
    if [[ "$dirname" =~ ^([1-9][0-9])\.([0-9]{5})\ -(.+)$ ]]; then
        local category="${BASH_REMATCH[1]}"
        local sub_number="${BASH_REMATCH[2]}"
        local name="${BASH_REMATCH[3]}"

        # Check if category is in valid range (10-99)
        if [[ "$category" -ge 10 && "$category" -le 99 ]]; then
            # Trim leading/trailing spaces from name
            name=$(echo "$name" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            if [[ -n "$name" ]]; then
                return 0
            fi
        fi
    fi

    # Check if it matches the pattern: NN.NN - Name (decimal format)
    if [[ "$dirname" =~ ^([1-9][0-9])\.([0-9]{2})\ -(.+)$ ]]; then
        local category="${BASH_REMATCH[1]}"
        local sub_number="${BASH_REMATCH[2]}"
        local name="${BASH_REMATCH[3]}"

        # Check if category is in valid range (10-99)
        if [[ "$category" -ge 10 && "$category" -le 99 ]]; then
            # Trim leading/trailing spaces from name
            name=$(echo "$name" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            if [[ -n "$name" ]]; then
                return 0
            fi
        fi
    fi

    # Check if it matches the pattern: NN - Name (simple format)
    if [[ "$dirname" =~ ^([1-9][0-9])\ -(.+)$ ]]; then
        local number="${BASH_REMATCH[1]}"
        local name="${BASH_REMATCH[2]}"

        # Check if number is in valid range (10-99)
        if [[ "$number" -ge 10 && "$number" -le 99 ]]; then
            # Trim leading/trailing spaces from name
            name=$(echo "$name" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
            if [[ -n "$name" ]]; then
                return 0
            fi
        fi
    fi

    return 1
}

# Get suggested name for a directory
suggest_name() {
    local dirname="$1"
    local basename=$(basename "$dirname")

    # If it's already a valid Johnny Decimal name, return as is
    if is_johnny_decimal "$basename"; then
        echo "$basename"
        return
    fi

    # Extract the name part (remove any existing numbers)
    local clean_name=$(echo "$basename" | sed 's/^[0-9]*[-_]*//' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-//' | sed 's/-$//')

    # Generate a placeholder number (you might want to make this smarter)
    local suggested_number="50"

    echo "${suggested_number}-${clean_name}"
}

# Check a single directory
check_directory() {
    local dir_path="$1"
    local dir_name=$(basename "$dir_path")
    local parent_path=$(dirname "$dir_path")

    # Skip hidden directories and common system directories
    if [[ "$dir_name" =~ ^\. ]] || [[ "$dir_name" =~ ^(node_modules|\.git|\.svn|\.hg)$ ]]; then
        return 0
    fi

    # Allow "Inbox" folder at root level
    if [[ "$dir_name" == "Inbox" && "$parent_path" == "$TARGET_PATH" ]]; then
        if [[ "$VERBOSE" == "true" ]]; then
            echo -e "${GREEN}✓${NC} $dir_path (Inbox at root)"
        fi
        return 0
    fi

    # Handle trailing slash in TARGET_PATH for Inbox check
    local normalized_target=$(echo "$TARGET_PATH" | sed 's|/$||')
    if [[ "$dir_name" == "Inbox" && "$parent_path" == "$normalized_target" ]]; then
        if [[ "$VERBOSE" == "true" ]]; then
            echo -e "${GREEN}✓${NC} $dir_path (Inbox at root)"
        fi
        return 0
    fi

    if is_johnny_decimal "$dir_name"; then
        if [[ "$VERBOSE" == "true" ]]; then
            echo -e "${GREEN}✓${NC} $dir_path"
        fi
        return 0
    else
        echo -e "${RED}✗${NC} $dir_path"
        echo -e "  ${YELLOW}Expected format: NN-name (where NN is 10-99)${NC}"

        if [[ "$FIX_MODE" == "true" ]]; then
            local suggested_name=$(suggest_name "$dir_path")
            echo -e "  ${BLUE}Suggested name: $suggested_name${NC}"

            read -p "  Rename to '$suggested_name'? (y/n): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                local new_path="$parent_path/$suggested_name"
                if [[ -e "$new_path" ]]; then
                    echo -e "  ${RED}Error: '$new_path' already exists${NC}"
                else
                    mv "$dir_path" "$new_path"
                    echo -e "  ${GREEN}Renamed to: $new_path${NC}"
                fi
            fi
        fi
        return 1
    fi
}

# Main function to check directories
check_paths() {
    local target="$1"
    local has_errors=false

    if [[ "$VERBOSE" == "true" ]]; then
        echo -e "${BLUE}Checking Johnny Decimal compliance for: $target${NC}"
        echo
    fi

    # Find directories to check
    local find_cmd="find \"$target\" -maxdepth 1 -type d"
    if [[ "$RECURSIVE" == "true" ]]; then
        find_cmd="find \"$target\" -type d"
    fi

    # Skip the target directory itself if it's not the current directory
    if [[ "$target" != "." ]]; then
        find_cmd="$find_cmd -not -path \"$target\""
    fi

    # Process each directory
    while IFS= read -r -d '' dir; do
        if ! check_directory "$dir"; then
            has_errors=true
        fi
    done < <(eval "$find_cmd -print0")

    if [[ "$has_errors" == "true" ]]; then
        echo
        echo -e "${RED}Some directories do not follow Johnny Decimal conventions${NC}"
        return 1
    else
        if [[ "$VERBOSE" == "true" ]]; then
            echo
            echo -e "${GREEN}All directories follow Johnny Decimal conventions!${NC}"
        fi
        return 0
    fi
}

# Summary function
show_summary() {
    echo
    echo -e "${BLUE}Johnny Decimal Rules:${NC}"
    echo "  • Directory names should follow the format: NN-name or NN-NN - Name"
    echo "  • NN should be a number between 10-99"
    echo "  • Strict format: lowercase with hyphens (e.g., 10-projects)"
    echo "  • Range format: Title Case with spaces (e.g., 10-19 - Projects)"
    echo "  • Simple format: NN - Name (e.g., 10 - Bigfoot)"
    echo "  • Decimal format: NN.NN - Name or NN.NNNNN - Name (e.g., 10.25006 - Import)"
    echo "  • No spaces or special characters except hyphens"
    echo "  • Examples: 10-projects, 20-documents, 99-archive, 10-19 - Projects, 10 - Bigfoot, 10.25006 - Import"
    echo "  • Exception: 'Inbox' folder is allowed at root level"
    echo
}

# Main execution
main() {
    show_summary

    if check_paths "$TARGET_PATH"; then
        exit 0
    else
        exit 1
    fi
}

# Run main function
main "$@"
